# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `client.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Bank
_M_Bank = Ice.openModule('Bank')
__name__ = 'Bank'

if 'Currency' not in _M_Bank.__dict__:
    _M_Bank.Currency = Ice.createTempClass()
    class Currency(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Currency.PLN = Currency("PLN", 0)
    Currency.EUR = Currency("EUR", 1)
    Currency.USD = Currency("USD", 2)
    Currency.GBP = Currency("GBP", 3)
    Currency.CHF = Currency("CHF", 4)
    Currency.JPY = Currency("JPY", 5)
    Currency._enumerators = { 0:Currency.PLN, 1:Currency.EUR, 2:Currency.USD, 3:Currency.GBP, 4:Currency.CHF, 5:Currency.JPY }

    _M_Bank._t_Currency = IcePy.defineEnum('::Bank::Currency', Currency, (), Currency._enumerators)

    _M_Bank.Currency = Currency
    del Currency

if 'LoanInfo' not in _M_Bank.__dict__:
    _M_Bank.LoanInfo = Ice.createTempClass()
    class LoanInfo(object):
        def __init__(self, amountInNativeCurrency=0, amountInForeignCurrency=0):
            self.amountInNativeCurrency = amountInNativeCurrency
            self.amountInForeignCurrency = amountInForeignCurrency

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.amountInNativeCurrency)
            _h = 5 * _h + Ice.getHash(self.amountInForeignCurrency)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Bank.LoanInfo):
                return NotImplemented
            else:
                if self.amountInNativeCurrency is None or other.amountInNativeCurrency is None:
                    if self.amountInNativeCurrency != other.amountInNativeCurrency:
                        return (-1 if self.amountInNativeCurrency is None else 1)
                else:
                    if self.amountInNativeCurrency < other.amountInNativeCurrency:
                        return -1
                    elif self.amountInNativeCurrency > other.amountInNativeCurrency:
                        return 1
                if self.amountInForeignCurrency is None or other.amountInForeignCurrency is None:
                    if self.amountInForeignCurrency != other.amountInForeignCurrency:
                        return (-1 if self.amountInForeignCurrency is None else 1)
                else:
                    if self.amountInForeignCurrency < other.amountInForeignCurrency:
                        return -1
                    elif self.amountInForeignCurrency > other.amountInForeignCurrency:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_LoanInfo)

        __repr__ = __str__

    _M_Bank._t_LoanInfo = IcePy.defineStruct('::Bank::LoanInfo', LoanInfo, (), (
        ('amountInNativeCurrency', (), IcePy._t_long),
        ('amountInForeignCurrency', (), IcePy._t_long)
    ))

    _M_Bank.LoanInfo = LoanInfo
    del LoanInfo

if '_t_Funds' not in _M_Bank.__dict__:
    _M_Bank._t_Funds = IcePy.defineDictionary('::Bank::Funds', (), _M_Bank._t_Currency, IcePy._t_long)

if 'AccountInfo' not in _M_Bank.__dict__:
    _M_Bank.AccountInfo = Ice.createTempClass()
    class AccountInfo(object):
        def __init__(self, isPremium=False, hasLoan=False, loanInfo=Ice._struct_marker, funds=None):
            self.isPremium = isPremium
            self.hasLoan = hasLoan
            if loanInfo is Ice._struct_marker:
                self.loanInfo = _M_Bank.LoanInfo()
            else:
                self.loanInfo = loanInfo
            self.funds = funds

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Bank.AccountInfo):
                return NotImplemented
            else:
                if self.isPremium != other.isPremium:
                    return False
                if self.hasLoan != other.hasLoan:
                    return False
                if self.loanInfo != other.loanInfo:
                    return False
                if self.funds != other.funds:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountInfo)

        __repr__ = __str__

    _M_Bank._t_AccountInfo = IcePy.defineStruct('::Bank::AccountInfo', AccountInfo, (), (
        ('isPremium', (), IcePy._t_bool),
        ('hasLoan', (), IcePy._t_bool),
        ('loanInfo', (), _M_Bank._t_LoanInfo),
        ('funds', (), _M_Bank._t_Funds)
    ))

    _M_Bank.AccountInfo = AccountInfo
    del AccountInfo

if 'LoanNotAllowed' not in _M_Bank.__dict__:
    _M_Bank.LoanNotAllowed = Ice.createTempClass()
    class LoanNotAllowed(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::LoanNotAllowed'

    _M_Bank._t_LoanNotAllowed = IcePy.defineException('::Bank::LoanNotAllowed', LoanNotAllowed, (), False, None, ())
    LoanNotAllowed._ice_type = _M_Bank._t_LoanNotAllowed

    _M_Bank.LoanNotAllowed = LoanNotAllowed
    del LoanNotAllowed

if 'CurrencyNoctSupported' not in _M_Bank.__dict__:
    _M_Bank.CurrencyNoctSupported = Ice.createTempClass()
    class CurrencyNoctSupported(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::CurrencyNoctSupported'

    _M_Bank._t_CurrencyNoctSupported = IcePy.defineException('::Bank::CurrencyNoctSupported', CurrencyNoctSupported, (), False, None, ())
    CurrencyNoctSupported._ice_type = _M_Bank._t_CurrencyNoctSupported

    _M_Bank.CurrencyNoctSupported = CurrencyNoctSupported
    del CurrencyNoctSupported

if 'IncorrectCredentials' not in _M_Bank.__dict__:
    _M_Bank.IncorrectCredentials = Ice.createTempClass()
    class IncorrectCredentials(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::IncorrectCredentials'

    _M_Bank._t_IncorrectCredentials = IcePy.defineException('::Bank::IncorrectCredentials', IncorrectCredentials, (), False, None, ())
    IncorrectCredentials._ice_type = _M_Bank._t_IncorrectCredentials

    _M_Bank.IncorrectCredentials = IncorrectCredentials
    del IncorrectCredentials

if 'UserAlreadyExists' not in _M_Bank.__dict__:
    _M_Bank.UserAlreadyExists = Ice.createTempClass()
    class UserAlreadyExists(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::UserAlreadyExists'

    _M_Bank._t_UserAlreadyExists = IcePy.defineException('::Bank::UserAlreadyExists', UserAlreadyExists, (), False, None, ())
    UserAlreadyExists._ice_type = _M_Bank._t_UserAlreadyExists

    _M_Bank.UserAlreadyExists = UserAlreadyExists
    del UserAlreadyExists

if 'InsufficientFunds' not in _M_Bank.__dict__:
    _M_Bank.InsufficientFunds = Ice.createTempClass()
    class InsufficientFunds(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::InsufficientFunds'

    _M_Bank._t_InsufficientFunds = IcePy.defineException('::Bank::InsufficientFunds', InsufficientFunds, (), False, None, ())
    InsufficientFunds._ice_type = _M_Bank._t_InsufficientFunds

    _M_Bank.InsufficientFunds = InsufficientFunds
    del InsufficientFunds

_M_Bank._t_Account = IcePy.defineValue('::Bank::Account', Ice.Value, -1, (), False, True, None, ())

if 'AccountPrx' not in _M_Bank.__dict__:
    _M_Bank.AccountPrx = Ice.createTempClass()
    class AccountPrx(Ice.ObjectPrx):

        def requestLoan(self, currency, amount, numOfMonths, context=None):
            return _M_Bank.Account._op_requestLoan.invoke(self, ((currency, amount, numOfMonths), context))

        def requestLoanAsync(self, currency, amount, numOfMonths, context=None):
            return _M_Bank.Account._op_requestLoan.invokeAsync(self, ((currency, amount, numOfMonths), context))

        def begin_requestLoan(self, currency, amount, numOfMonths, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Account._op_requestLoan.begin(self, ((currency, amount, numOfMonths), _response, _ex, _sent, context))

        def end_requestLoan(self, _r):
            return _M_Bank.Account._op_requestLoan.end(self, _r)

        def getAccountInfo(self, context=None):
            return _M_Bank.Account._op_getAccountInfo.invoke(self, ((), context))

        def getAccountInfoAsync(self, context=None):
            return _M_Bank.Account._op_getAccountInfo.invokeAsync(self, ((), context))

        def begin_getAccountInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Account._op_getAccountInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getAccountInfo(self, _r):
            return _M_Bank.Account._op_getAccountInfo.end(self, _r)

        def insertMoney(self, funds, context=None):
            return _M_Bank.Account._op_insertMoney.invoke(self, ((funds, ), context))

        def insertMoneyAsync(self, funds, context=None):
            return _M_Bank.Account._op_insertMoney.invokeAsync(self, ((funds, ), context))

        def begin_insertMoney(self, funds, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Account._op_insertMoney.begin(self, ((funds, ), _response, _ex, _sent, context))

        def end_insertMoney(self, _r):
            return _M_Bank.Account._op_insertMoney.end(self, _r)

        def withdrawMoney(self, funds, context=None):
            return _M_Bank.Account._op_withdrawMoney.invoke(self, ((funds, ), context))

        def withdrawMoneyAsync(self, funds, context=None):
            return _M_Bank.Account._op_withdrawMoney.invokeAsync(self, ((funds, ), context))

        def begin_withdrawMoney(self, funds, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Account._op_withdrawMoney.begin(self, ((funds, ), _response, _ex, _sent, context))

        def end_withdrawMoney(self, _r):
            return _M_Bank.Account._op_withdrawMoney.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.AccountPrx.ice_checkedCast(proxy, '::Bank::Account', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.AccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::Account'
    _M_Bank._t_AccountPrx = IcePy.defineProxy('::Bank::Account', AccountPrx)

    _M_Bank.AccountPrx = AccountPrx
    del AccountPrx

    _M_Bank.Account = Ice.createTempClass()
    class Account(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Bank::Account', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::Account'

        @staticmethod
        def ice_staticId():
            return '::Bank::Account'

        def requestLoan(self, currency, amount, numOfMonths, current=None):
            raise NotImplementedError("servant method 'requestLoan' not implemented")

        def getAccountInfo(self, current=None):
            raise NotImplementedError("servant method 'getAccountInfo' not implemented")

        def insertMoney(self, funds, current=None):
            raise NotImplementedError("servant method 'insertMoney' not implemented")

        def withdrawMoney(self, funds, current=None):
            raise NotImplementedError("servant method 'withdrawMoney' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_AccountDisp)

        __repr__ = __str__

    _M_Bank._t_AccountDisp = IcePy.defineClass('::Bank::Account', Account, (), None, ())
    Account._ice_type = _M_Bank._t_AccountDisp

    Account._op_requestLoan = IcePy.Operation('requestLoan', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Bank._t_Currency, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_int, False, 0)), (), ((), _M_Bank._t_LoanInfo, False, 0), (_M_Bank._t_IncorrectCredentials, _M_Bank._t_LoanNotAllowed))
    Account._op_getAccountInfo = IcePy.Operation('getAccountInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Bank._t_AccountInfo, False, 0), (_M_Bank._t_IncorrectCredentials,))
    Account._op_insertMoney = IcePy.Operation('insertMoney', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Bank._t_Funds, False, 0),), (), None, (_M_Bank._t_IncorrectCredentials,))
    Account._op_withdrawMoney = IcePy.Operation('withdrawMoney', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Bank._t_Funds, False, 0),), (), None, (_M_Bank._t_IncorrectCredentials, _M_Bank._t_InsufficientFunds))

    _M_Bank.Account = Account
    del Account

if 'RegistrationInfo' not in _M_Bank.__dict__:
    _M_Bank.RegistrationInfo = Ice.createTempClass()
    class RegistrationInfo(object):
        def __init__(self, isPremium=False, key=''):
            self.isPremium = isPremium
            self.key = key

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.isPremium)
            _h = 5 * _h + Ice.getHash(self.key)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Bank.RegistrationInfo):
                return NotImplemented
            else:
                if self.isPremium is None or other.isPremium is None:
                    if self.isPremium != other.isPremium:
                        return (-1 if self.isPremium is None else 1)
                else:
                    if self.isPremium < other.isPremium:
                        return -1
                    elif self.isPremium > other.isPremium:
                        return 1
                if self.key is None or other.key is None:
                    if self.key != other.key:
                        return (-1 if self.key is None else 1)
                else:
                    if self.key < other.key:
                        return -1
                    elif self.key > other.key:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_RegistrationInfo)

        __repr__ = __str__

    _M_Bank._t_RegistrationInfo = IcePy.defineStruct('::Bank::RegistrationInfo', RegistrationInfo, (), (
        ('isPremium', (), IcePy._t_bool),
        ('key', (), IcePy._t_string)
    ))

    _M_Bank.RegistrationInfo = RegistrationInfo
    del RegistrationInfo

_M_Bank._t_Factory = IcePy.defineValue('::Bank::Factory', Ice.Value, -1, (), False, True, None, ())

if 'FactoryPrx' not in _M_Bank.__dict__:
    _M_Bank.FactoryPrx = Ice.createTempClass()
    class FactoryPrx(Ice.ObjectPrx):

        def createAccount(self, name, surname, threshold, id, context=None):
            return _M_Bank.Factory._op_createAccount.invoke(self, ((name, surname, threshold, id), context))

        def createAccountAsync(self, name, surname, threshold, id, context=None):
            return _M_Bank.Factory._op_createAccount.invokeAsync(self, ((name, surname, threshold, id), context))

        def begin_createAccount(self, name, surname, threshold, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Factory._op_createAccount.begin(self, ((name, surname, threshold, id), _response, _ex, _sent, context))

        def end_createAccount(self, _r):
            return _M_Bank.Factory._op_createAccount.end(self, _r)

        def login(self, id, context=None):
            return _M_Bank.Factory._op_login.invoke(self, ((id, ), context))

        def loginAsync(self, id, context=None):
            return _M_Bank.Factory._op_login.invokeAsync(self, ((id, ), context))

        def begin_login(self, id, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Factory._op_login.begin(self, ((id, ), _response, _ex, _sent, context))

        def end_login(self, _r):
            return _M_Bank.Factory._op_login.end(self, _r)

        def logout(self, context=None):
            return _M_Bank.Factory._op_logout.invoke(self, ((), context))

        def logoutAsync(self, context=None):
            return _M_Bank.Factory._op_logout.invokeAsync(self, ((), context))

        def begin_logout(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.Factory._op_logout.begin(self, ((), _response, _ex, _sent, context))

        def end_logout(self, _r):
            return _M_Bank.Factory._op_logout.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.FactoryPrx.ice_checkedCast(proxy, '::Bank::Factory', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.FactoryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::Factory'
    _M_Bank._t_FactoryPrx = IcePy.defineProxy('::Bank::Factory', FactoryPrx)

    _M_Bank.FactoryPrx = FactoryPrx
    del FactoryPrx

    _M_Bank.Factory = Ice.createTempClass()
    class Factory(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Bank::Factory', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::Factory'

        @staticmethod
        def ice_staticId():
            return '::Bank::Factory'

        def createAccount(self, name, surname, threshold, id, current=None):
            raise NotImplementedError("servant method 'createAccount' not implemented")

        def login(self, id, current=None):
            raise NotImplementedError("servant method 'login' not implemented")

        def logout(self, current=None):
            raise NotImplementedError("servant method 'logout' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_FactoryDisp)

        __repr__ = __str__

    _M_Bank._t_FactoryDisp = IcePy.defineClass('::Bank::Factory', Factory, (), None, ())
    Factory._ice_type = _M_Bank._t_FactoryDisp

    Factory._op_createAccount = IcePy.Operation('createAccount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0), ((), IcePy._t_long, False, 0)), (), ((), _M_Bank._t_RegistrationInfo, False, 0), (_M_Bank._t_UserAlreadyExists,))
    Factory._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0),), (), None, (_M_Bank._t_IncorrectCredentials,))
    Factory._op_logout = IcePy.Operation('logout', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Bank.Factory = Factory
    del Factory

# End of module Bank
